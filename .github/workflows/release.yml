name: Release
on:
  push:
    tags:
      - v?[0-9]+.[0-9]+.*
  workflow_call:
    inputs:
      tag:
        description: Target tag
        required: true
        type: string

jobs:
  release:
    name: page
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Extract the version tag
        id: version
        run: |
          if [ -z "${{ inputs.tag }}" ]; then
              echo ::set-output name=value::$(echo $GITHUB_REF | cut -d / -f 3)
          else
              echo ::set-output name=value::${{ inputs.tag }}
          fi

      # checkout needed for changelog only
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ steps.version.outputs.value }}

      - id: changelog
        name: Generate Changelog
        continue-on-error: true
        run: |
          # XXX: Why not all tags fetched?
          git fetch --tags --all --prune-tags --force

          TAG_FIRST=$(git describe --abbrev=0 --tags $(git describe --abbrev=0)^)
          TAG_SECOND=$(git describe --abbrev=0)
          echo "Generating changelog between tags: ${{ steps.version.outputs.value }}...$TAG_FIRST...$TAG_SECOND"

          RESULT_FILE=generated-changelog.md
          RESULT_LOG_ACT="$(git log $TAG_SECOND...${{ steps.version.outputs.value }} --pretty=format:'- %s [·](${{ github.event.repository.html_url }}/commit/%H)' --reverse)"
          RESULT_LOG_POST="$(git log $TAG_FIRST...$TAG_SECOND --pretty=format:'- %s [·](${{ github.event.repository.html_url }}/commit/%H)' --reverse)"

          echo "
          ## TODO: EDIT ME BEFORE PUBLISH

          [link-main]: ${{ github.event.repository.html_url }}/actions?query=workflow%3A%22Release%22
          [badge-main]: ${{ github.event.repository.html_url }}/workflows/Release/badge.svg?event=workflow_call (main workflow)

          __Please wait build completions for:__
          - [![Build Release Tools][badge-main]][link-main]

          - - -

          __Changelog ${{ steps.version.outputs.value }}__…${TAG_SECOND}

          $RESULT_LOG_ACT

          __${TAG_SECOND}__…${TAG_FIRST}

          $RESULT_LOG_POST

          <!-- Built with ♥️. -->
          " > $RESULT_FILE

          echo ::set-output name=file::"$RESULT_FILE"

      - id: release
        name: Create release ${{ steps.version.outputs.value }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          prerelease: true
          tag_name: ${{ steps.version.outputs.value }}
          release_name: ${{ steps.version.outputs.value }}
          body_path: ${{ steps.changelog.outputs.file }}

      - name: Save urls for other workflows
        run: |
          echo "${{ steps.version.outputs.value }} ${{ steps.release.outputs.upload_url }}" > release-upload.url
          echo "${{ steps.release.outputs.html_url }}" > release-page.url

      - name: Save assets url as artifact
        uses: actions/upload-artifact@v2
        with:
          name: release assets url
          path: release-upload.url
          if-no-files-found: error
          retention-days: 1

      - name: Save page url as artifact
        uses: actions/upload-artifact@v2
        with:
          name: release page url
          path: release-page.url
          if-no-files-found: error
          retention-days: 1

    outputs:
      tag: ${{ steps.version.outputs.value }}
      upload_url: ${{ steps.release.outputs.upload_url }}
      html_url: ${{ steps.release.outputs.html_url }}

  build:
    needs: release
    name: ${{ matrix.os.name }}
    runs-on: ${{ matrix.os.value }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: macos
            value: macos-latest
          - name: ubuntu
            value: ubuntu-latest
        dove:
          - 1.5.5
    defaults:
      run:
        shell: bash
    env:
      CARGO_INCREMENTAL: 0
      RUSTUP_MAX_RETRIES: 10
      CARGO_NET_RETRY: 10

    steps:
      - name: Prepare Metadata
        id: build-info
        run: |
          echo "${{ needs.release.outputs.tag }}"
          echo "${{ needs.release.outputs.upload_url }}"

          uname -a > build-info.txt
          rustc -V >> build-info.txt
          echo "::set-output name=arch::$(uname -m)"

      - name: Checkout repository
        uses: actions/checkout@v2

      - id: rust # MSRV
        name: Read required Rust version
        run: |
          echo "WASM_BUILD_TOOLCHAIN=$(cat rust-toolchain)" >> $GITHUB_ENV
          echo ::set-output name=version::$(cat rust-toolchain)

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ steps.rust.outputs.version }}
          profile: minimal
          target: wasm32-unknown-unknown
          override: false

      - name: Restore Rust cache
        uses: Swatinem/rust-cache@v1

      - name: Get Dove
        uses: pontem-network/get-dove@main
        with:
          prerelease: true
          version: ${{ matrix.dove }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: cargo +${{ steps.rust.outputs.version }} build --release

      - name: Upload Node
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: target/release/pontem
          asset_name: pontem-${{ matrix.os.name }}-${{ steps.build-info.outputs.arch }}
          asset_content_type: application/octet-stream

      - name: Upload Runtime
        if: matrix.os.name == 'ubuntu'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: target/release/wbuild/pontem-runtime/target/wasm32-unknown-unknown/release/pontem_runtime.wasm
          asset_name: pontem_runtime.wasm
          asset_content_type: application/wasm

      - name: Upload Runtime Compact
        if: matrix.os.name == 'ubuntu'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: target/release/wbuild/pontem-runtime/pontem_runtime.compact.wasm
          asset_name: pontem_runtime.compact.wasm
          asset_content_type: application/wasm

      - name: Upload Runtime Compressed
        if: matrix.os.name == 'ubuntu'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: target/release/wbuild/pontem-runtime/pontem_runtime.compact.compressed.wasm
          asset_name: pontem_runtime.compact.compressed.wasm
          asset_content_type: application/wasm
      # also
      #   - pontem_runtime.compact.compressed.wasm
      # wbuild/polkadot-runtime
      #   - polkadot_runtime.compact.compressed.wasm
      #   - polkadot_runtime.compact.wasm
      #   - polkadot_runtime.wasm
      # wbuild/rococo-runtime
      #   - rococo_runtime.compact.compressed.wasm
      #   - rococo_runtime.compact.wasm
      #   - rococo_runtime.wasm
